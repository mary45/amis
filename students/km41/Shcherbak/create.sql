
--
-- Create model ContentType
--
CREATE TABLE "DJANGO_CONTENT_TYPE" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "NAME" NVARCHAR2(100) NULL, "APP_LABEL" NVARCHAR2(100) NULL, "MODEL" NVARCHAR2(100) NULL);
--
-- Alter unique_together for contenttype (1 constraint(s))
--
ALTER TABLE "DJANGO_CONTENT_TYPE" ADD CONSTRAINT "DJANGO_CO_APP_LABEL_76BD3D3B_U" UNIQUE ("APP_LABEL", "MODEL");

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'DJANGO_CONTENT_TYPE_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "DJANGO_CONTENT_TYPE_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "DJANGO_CONTENT_TYPE_TR"
BEFORE INSERT ON "DJANGO_CONTENT_TYPE"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "DJANGO_CONTENT_TYPE_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
COMMIT;


--
-- Change Meta options on contenttype
--
--
-- Alter field name on contenttype
--
--
-- MIGRATION NOW PERFORMS OPERATION THAT CANNOT BE WRITTEN AS SQL:
-- Raw Python operation
--
--
-- Remove field name from contenttype
--
ALTER TABLE "DJANGO_CONTENT_TYPE" DROP COLUMN "NAME";
COMMIT;


--
-- Create model Permission
--
CREATE TABLE "AUTH_PERMISSION" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "NAME" NVARCHAR2(50) NULL, "CONTENT_TYPE_ID" NUMBER(11) NOT NULL, "CODENAME" NVARCHAR2(100) NULL);
--
-- Create model Group
--
CREATE TABLE "AUTH_GROUP" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "NAME" NVARCHAR2(80) NULL UNIQUE);
CREATE TABLE "AUTH_GROUP_PERMISSIONS" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "GROUP_ID" NUMBER(11) NOT NULL, "PERMISSION_ID" NUMBER(11) NOT NULL);
--
-- Create model User
--

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'AUTH_PERMISSION_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "AUTH_PERMISSION_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "AUTH_PERMISSION_TR"
BEFORE INSERT ON "AUTH_PERMISSION"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "AUTH_PERMISSION_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "AUTH_PERMISSION" ADD CONSTRAINT "AUTH_PERM_CONTENT_T_2F476E4B_F" FOREIGN KEY ("CONTENT_TYPE_ID") REFERENCES "DJANGO_CONTENT_TYPE" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "AUTH_PERMISSION" ADD CONSTRAINT "AUTH_PERM_CONTENT_T_01AB375A_U" UNIQUE ("CONTENT_TYPE_ID", "CODENAME");
CREATE INDEX "AUTH_PERMI_CONTENT_TY_2F476E4B" ON "AUTH_PERMISSION" ("CONTENT_TYPE_ID");

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'AUTH_GROUP_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "AUTH_GROUP_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "AUTH_GROUP_TR"
BEFORE INSERT ON "AUTH_GROUP"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "AUTH_GROUP_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'AUTH_GROUP_PERMISSIONS_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "AUTH_GROUP_PERMISSIONS_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "AUTH_GROUP_PERMISSIONS_TR"
BEFORE INSERT ON "AUTH_GROUP_PERMISSIONS"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "AUTH_GROUP_PERMISSIONS_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "AUTH_GROUP_PERMISSIONS" ADD CONSTRAINT "AUTH_GROU_GROUP_ID_B120CBF9_F" FOREIGN KEY ("GROUP_ID") REFERENCES "AUTH_GROUP" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "AUTH_GROUP_PERMISSIONS" ADD CONSTRAINT "AUTH_GROU_PERMISSIO_84C5C92E_F" FOREIGN KEY ("PERMISSION_ID") REFERENCES "AUTH_PERMISSION" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "AUTH_GROUP_PERMISSIONS" ADD CONSTRAINT "AUTH_GROU_GROUP_ID__0CD325B0_U" UNIQUE ("GROUP_ID", "PERMISSION_ID");
CREATE INDEX "AUTH_GROUP_GROUP_ID_B120CBF9" ON "AUTH_GROUP_PERMISSIONS" ("GROUP_ID");
CREATE INDEX "AUTH_GROUP_PERMISSION_84C5C92E" ON "AUTH_GROUP_PERMISSIONS" ("PERMISSION_ID");
COMMIT;


--
-- Alter field name on permission
--
ALTER TABLE "AUTH_PERMISSION" MODIFY "NAME" NVARCHAR2(255);
COMMIT;


--
-- Create model Registration
--
CREATE TABLE "REGISTER_REGISTRATION" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "PASSWORD" NVARCHAR2(128) NULL, "LAST_LOGIN" TIMESTAMP NULL, "IS_SUPERUSER" NUMBER(1) NOT NULL CHECK ("IS_SUPERUSER" IN (0,1)), "USERNAME" NVARCHAR2(150) NULL UNIQUE, "FIRST_NAME" NVARCHAR2(30) NULL, "LAST_NAME" NVARCHAR2(30) NULL, "EMAIL" NVARCHAR2(254) NULL, "IS_STAFF" NUMBER(1) NOT NULL CHECK ("IS_STAFF" IN (0,1)), "IS_ACTIVE" NUMBER(1) NOT NULL CHECK ("IS_ACTIVE" IN (0,1)), "DATE_JOINED" TIMESTAMP NOT NULL, "IDENTIFYING" NVARCHAR2(8) NULL, "PHONE" NVARCHAR2(50) NULL, "ADRESS" NVARCHAR2(50) NULL, "SHOP_NAME" NVARCHAR2(50) NULL);
CREATE TABLE "REGISTER_REGISTRATION_GROUPS" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "REGISTRATION_ID" NUMBER(11) NOT NULL, "GROUP_ID" NUMBER(11) NOT NULL);
CREATE TABLE "REGISTER_REGISTRATION_USEREB29" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "REGISTRATION_ID" NUMBER(11) NOT NULL, "PERMISSION_ID" NUMBER(11) NOT NULL);

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'REGISTER_REGISTRATION_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "REGISTER_REGISTRATION_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "REGISTER_REGISTRATION_TR"
BEFORE INSERT ON "REGISTER_REGISTRATION"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "REGISTER_REGISTRATION_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'REGISTER_REGISTRATION_GC1CF';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "REGISTER_REGISTRATION_GC1CF"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "REGISTER_REGISTRATION_G5EAF"
BEFORE INSERT ON "REGISTER_REGISTRATION_GROUPS"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "REGISTER_REGISTRATION_GC1CF".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "REGISTER_REGISTRATION_GROUPS" ADD CONSTRAINT "REGISTER__REGISTRAT_5979E407_F" FOREIGN KEY ("REGISTRATION_ID") REFERENCES "REGISTER_REGISTRATION" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "REGISTER_REGISTRATION_GROUPS" ADD CONSTRAINT "REGISTER__GROUP_ID_5DF9C552_F" FOREIGN KEY ("GROUP_ID") REFERENCES "AUTH_GROUP" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "REGISTER_REGISTRATION_GROUPS" ADD CONSTRAINT "REGISTER__REGISTRAT_9300C91E_U" UNIQUE ("REGISTRATION_ID", "GROUP_ID");
CREATE INDEX "REGISTER_R_REGISTRATI_5979E407" ON "REGISTER_REGISTRATION_GROUPS" ("REGISTRATION_ID");
CREATE INDEX "REGISTER_R_GROUP_ID_5DF9C552" ON "REGISTER_REGISTRATION_GROUPS" ("GROUP_ID");

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'REGISTER_REGISTRATION_U350B';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "REGISTER_REGISTRATION_U350B"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "REGISTER_REGISTRATION_UB805"
BEFORE INSERT ON "REGISTER_REGISTRATION_USEREB29"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "REGISTER_REGISTRATION_U350B".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "REGISTER_REGISTRATION_USEREB29" ADD CONSTRAINT "REGISTER__REGISTRAT_18537EF2_F" FOREIGN KEY ("REGISTRATION_ID") REFERENCES "REGISTER_REGISTRATION" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "REGISTER_REGISTRATION_USEREB29" ADD CONSTRAINT "REGISTER__PERMISSIO_5590CEF5_F" FOREIGN KEY ("PERMISSION_ID") REFERENCES "AUTH_PERMISSION" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "REGISTER_REGISTRATION_USEREB29" ADD CONSTRAINT "REGISTER__REGISTRAT_FC9891AA_U" UNIQUE ("REGISTRATION_ID", "PERMISSION_ID");
CREATE INDEX "REGISTER_R_REGISTRATI_18537EF2" ON "REGISTER_REGISTRATION_USEREB29" ("REGISTRATION_ID");
CREATE INDEX "REGISTER_R_PERMISSION_5590CEF5" ON "REGISTER_REGISTRATION_USEREB29" ("PERMISSION_ID");
COMMIT;


--
-- Create model LogEntry
--
CREATE TABLE "DJANGO_ADMIN_LOG" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "ACTION_TIME" TIMESTAMP NOT NULL, "OBJECT_ID" NCLOB NULL, "OBJECT_REPR" NVARCHAR2(200) NULL, "ACTION_FLAG" NUMBER(11) NOT NULL CHECK ("ACTION_FLAG" >= 0), "CHANGE_MESSAGE" NCLOB NULL, "CONTENT_TYPE_ID" NUMBER(11) NULL, "USER_ID" NUMBER(11) NOT NULL);

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'DJANGO_ADMIN_LOG_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "DJANGO_ADMIN_LOG_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "DJANGO_ADMIN_LOG_TR"
BEFORE INSERT ON "DJANGO_ADMIN_LOG"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "DJANGO_ADMIN_LOG_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "DJANGO_ADMIN_LOG" ADD CONSTRAINT "DJANGO_AD_CONTENT_T_C4BCE8EB_F" FOREIGN KEY ("CONTENT_TYPE_ID") REFERENCES "DJANGO_CONTENT_TYPE" ("ID") DEFERRABLE INITIALLY DEFERRED;
ALTER TABLE "DJANGO_ADMIN_LOG" ADD CONSTRAINT "DJANGO_AD_USER_ID_C564EBA6_F" FOREIGN KEY ("USER_ID") REFERENCES "REGISTER_REGISTRATION" ("ID") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "DJANGO_ADM_CONTENT_TY_C4BCE8EB" ON "DJANGO_ADMIN_LOG" ("CONTENT_TYPE_ID");
CREATE INDEX "DJANGO_ADM_USER_ID_C564EBA6" ON "DJANGO_ADMIN_LOG" ("USER_ID");
COMMIT;


--
-- Create model Order
--
CREATE TABLE "PRODUCTS_ORDER" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "ORDER_TIME" TIMESTAMP NULL, "QUANTITY" NUMBER(11) NOT NULL CHECK ("QUANTITY" >= 0));
--
-- Create model ProductItem
--
CREATE TABLE "PRODUCTS_PRODUCTITEM" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "NAME" NVARCHAR2(50) NULL, "PRICE" NUMBER(11) NOT NULL CHECK ("PRICE" >= 0), "QUANTITY" NUMBER(11) NOT NULL CHECK ("QUANTITY" >= 0), "PRODUCT_PICTURE" NVARCHAR2(100) NULL);
--
-- Create model Shop
--
CREATE TABLE "PRODUCTS_SHOP" ("ID" NUMBER(11) NOT NULL PRIMARY KEY, "NAME" NVARCHAR2(50) NULL, "PLACE" NVARCHAR2(100) NULL, "DESCRTIPTION" NVARCHAR2(255) NULL, "OWNER_ID" NUMBER(11) NOT NULL UNIQUE);
--
-- Add field shop to productitem
--
ALTER TABLE "PRODUCTS_PRODUCTITEM" ADD "SHOP_ID" NUMBER(11) NULL;
--
-- Add field product_item to order
--
ALTER TABLE "PRODUCTS_ORDER" ADD "PRODUCT_ITEM_ID" NUMBER(11) NULL;
--
-- Add field shop to order
--
ALTER TABLE "PRODUCTS_ORDER" ADD "SHOP_ID" NUMBER(11) NOT NULL;
--
-- Add field user to order
--
ALTER TABLE "PRODUCTS_ORDER" ADD "USER_ID" NUMBER(11) NOT NULL;
--
-- Alter unique_together for productitem (1 constraint(s))
--
ALTER TABLE "PRODUCTS_PRODUCTITEM" ADD CONSTRAINT "PRODUCTS__NAME_SHOP_AC589AF3_U" UNIQUE ("NAME", "SHOP_ID");

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'PRODUCTS_ORDER_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "PRODUCTS_ORDER_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "PRODUCTS_ORDER_TR"
BEFORE INSERT ON "PRODUCTS_ORDER"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "PRODUCTS_ORDER_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'PRODUCTS_PRODUCTITEM_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "PRODUCTS_PRODUCTITEM_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "PRODUCTS_PRODUCTITEM_TR"
BEFORE INSERT ON "PRODUCTS_PRODUCTITEM"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "PRODUCTS_PRODUCTITEM_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/

DECLARE
    i INTEGER;
BEGIN
    SELECT COUNT(1) INTO i FROM USER_SEQUENCES
        WHERE SEQUENCE_NAME = 'PRODUCTS_SHOP_SQ';
    IF i = 0 THEN
        EXECUTE IMMEDIATE 'CREATE SEQUENCE "PRODUCTS_SHOP_SQ"';
    END IF;
END;
/

CREATE OR REPLACE TRIGGER "PRODUCTS_SHOP_TR"
BEFORE INSERT ON "PRODUCTS_SHOP"
FOR EACH ROW
WHEN (new."ID" IS NULL)
    BEGIN
        SELECT "PRODUCTS_SHOP_SQ".nextval
        INTO :new."ID" FROM dual;
    END;
/
ALTER TABLE "PRODUCTS_SHOP" ADD CONSTRAINT "PRODUCTS__OWNER_ID_011910B6_F" FOREIGN KEY ("OWNER_ID") REFERENCES "REGISTER_REGISTRATION" ("ID") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "PRODUCTS_P_SHOP_ID_BD0DDE71" ON "PRODUCTS_PRODUCTITEM" ("SHOP_ID");
ALTER TABLE "PRODUCTS_PRODUCTITEM" ADD CONSTRAINT "PRODUCTS__SHOP_ID_BD0DDE71_F" FOREIGN KEY ("SHOP_ID") REFERENCES "PRODUCTS_SHOP" ("ID") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "PRODUCTS_O_PRODUCT_IT_DD7E9276" ON "PRODUCTS_ORDER" ("PRODUCT_ITEM_ID");
ALTER TABLE "PRODUCTS_ORDER" ADD CONSTRAINT "PRODUCTS__PRODUCT_I_DD7E9276_F" FOREIGN KEY ("PRODUCT_ITEM_ID") REFERENCES "PRODUCTS_PRODUCTITEM" ("ID") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "PRODUCTS_O_SHOP_ID_C74452DD" ON "PRODUCTS_ORDER" ("SHOP_ID");
ALTER TABLE "PRODUCTS_ORDER" ADD CONSTRAINT "PRODUCTS__SHOP_ID_C74452DD_F" FOREIGN KEY ("SHOP_ID") REFERENCES "PRODUCTS_SHOP" ("ID") DEFERRABLE INITIALLY DEFERRED;
CREATE INDEX "PRODUCTS_O_USER_ID_DFB540D8" ON "PRODUCTS_ORDER" ("USER_ID");
ALTER TABLE "PRODUCTS_ORDER" ADD CONSTRAINT "PRODUCTS__USER_ID_DFB540D8_F" FOREIGN KEY ("USER_ID") REFERENCES "REGISTER_REGISTRATION" ("ID") DEFERRABLE INITIALLY DEFERRED;
COMMIT;


--
-- Create model Session
--
CREATE TABLE "DJANGO_SESSION" ("SESSION_KEY" NVARCHAR2(40) NOT NULL PRIMARY KEY, "SESSION_DATA" NCLOB NULL, "EXPIRE_DATE" TIMESTAMP NOT NULL);
CREATE INDEX "DJANGO_SES_EXPIRE_DAT_A5C62663" ON "DJANGO_SESSION" ("EXPIRE_DATE");
COMMIT;

--
-- Customs
--
CREATE OR REPLACE TRIGGER CREATE_DATE BEFORE INSERT ON PRODUCTS_ORDER 
FOR EACH ROW
BEGIN
 :NEW.ORDER_TIME := SYSDATE;
END;
/
COMMIT;

/*==============================================================*/
/* Added manually                                               */
/*==============================================================*/

ALTER TABLE "REGISTER_REGISTRATION"
   ADD CONSTRAINT check_user_email
      CHECK ( REGEXP_LIKE (EMAIL, '[a-z0-9._]+@[a-z0-9._]+\.[a-z]{2,4}'));

ALTER TABLE "REGISTER_REGISTRATION"
   ADD CONSTRAINT check_adress
      CHECK ( REGEXP_LIKE (ADRESS, '[A-Za-z0-9_., /]{0,30}'));

ALTER TABLE "REGISTER_REGISTRATION"
   ADD CONSTRAINT check_shop_name
      CHECK (REGEXP_LIKE(SHOP_NAME,'[A-Z a-z]{2,20}'));

ALTER TABLE "PRODUCTS_SHOP"
   ADD CONSTRAINT check_product_name
      CHECK (REGEXP_LIKE(NAME,'[A-Z a-z]{2,20}'));

ALTER TABLE "PRODUCTS_SHOP"
   ADD CONSTRAINT check_shop_adress
      CHECK ( REGEXP_LIKE (PLACE, '[A-Za-z0-9_., /]{0,30}'));

ALTER TABLE "PRODUCTS_PRODUCTITEM"
   ADD CONSTRAINT check_product_name2
      CHECK (REGEXP_LIKE(NAME,'[A-Z a-z]{2,20}'));

COMMIT;